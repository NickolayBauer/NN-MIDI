import os
from read_bin import load_on_file
import numpy as np
from itertools import zip_longest

########################################################################
#
# Используемые функции:
# chunks – разбитие матрицы по отрезкам;
# clear – преобразование матрицы к необходимой размерности;
# get_collect - возвращает матрицы для тренировок и обучения.
#
########################################################################

########################################################################
#
# chunks – разбитие матрицы по отрезкам;
#
########################################################################
#
# Используемые переменные:
# lst - данные для разбития;
# count - сколько элементов будет в разбитом отрезке;
# elem - элемент диапазона;
# value - список пустых значений; 
# z_ip - разбитые данные.
#
########################################################################

def chunks(lst, count):
    value = [0 for elem in range(len(lst[0]))]
    z_ip = zip_longest(*[iter(lst)] * count, fillvalue = value)
    return [list(elem) for elem in z_ip]

########################################################################
#
# clear – преобразование матрицы к необходимой размерности;
#
########################################################################
#
# Используемые переменные:
# file - матрица;
# row - строка матрицы;
# elem - элемент матрицы;
# result - преобразованный результат.
#
########################################################################

def clear(file):
    row = []
    result = []
    for rows in file:
        for elem in rows:
            row.append([elem])
        result.append(row)
        row = []
    return result

########################################################################
#
# get_collect - возвращает матрицы для тренировок и обучения.
#
########################################################################
#
# Используемые переменные:
# path - путь к набору файлов;
# data_edu - данные для обучения;
# label_edu - метки для обучения;
# data_work - данные для распознования;
# i - индекс файлов;
# elem - элемент из набора файлов.
#
########################################################################

def get_collect():
    path = "text_presets/"
    data_edu = []
    label_edu = []
    data_work = []
    for i, elem in enumerate(os.listdir(path)):
        data_edu.append(clear(load_on_file(path+elem)))
        label_edu.append(i)

    for elem in chunks(load_on_file("example.txt"),24):
        data_work.append(clear(elem))

    data_edu = np.array(data_edu)
    label_edu = np.array(label_edu)
    data_work = np.array(data_work)

    return data_edu, label_edu, data_work

